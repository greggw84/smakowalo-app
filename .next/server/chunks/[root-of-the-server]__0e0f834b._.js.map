{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"sources":["file:///Users/greg_mac/Downloads/smakowalo-app/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from 'next-auth'\nimport FacebookProvider from 'next-auth/providers/facebook'\nimport GoogleProvider from 'next-auth/providers/google'\nimport EmailProvider from 'next-auth/providers/email'\nimport CredentialsProvider from 'next-auth/providers/credentials'\nimport { SupabaseAdapter } from '@auth/supabase-adapter'\nimport { createClient } from '@supabase/supabase-js'\n\n// Environment variables\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || ''\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || ''\nconst facebookClientId = process.env.FACEBOOK_CLIENT_ID || ''\nconst facebookClientSecret = process.env.FACEBOOK_CLIENT_SECRET || ''\nconst googleClientId = process.env.GOOGLE_CLIENT_ID || ''\nconst googleClientSecret = process.env.GOOGLE_CLIENT_SECRET || ''\n\n// Check if we have real Supabase credentials\nconst hasSupabase = supabaseUrl.startsWith('https://') &&\n                   !supabaseUrl.includes('placeholder') &&\n                   supabaseServiceKey.length > 50 &&\n                   !supabaseServiceKey.includes('placeholder')\n\n// Create Supabase client only if we have valid credentials\nconst supabase = hasSupabase ? createClient(supabaseUrl, supabaseServiceKey) : null\n\nconsole.log('NextAuth Config:', {\n  hasSupabase,\n  hasFacebook: !!(facebookClientId && facebookClientSecret),\n  hasGoogle: !!(googleClientId && googleClientSecret),\n  hasEmail: !!(process.env.EMAIL_SERVER_HOST && process.env.EMAIL_FROM)\n})\n\nconst handler = NextAuth({\n  // Use Supabase adapter only if configured\n  adapter: hasSupabase ? SupabaseAdapter({\n    url: supabaseUrl,\n    secret: supabaseServiceKey,\n  }) : undefined,\n\n  providers: [\n    // Facebook OAuth - only if configured\n    ...(facebookClientId && facebookClientSecret ? [FacebookProvider({\n      clientId: facebookClientId,\n      clientSecret: facebookClientSecret,\n    })] : []),\n\n    // Google OAuth - only if configured\n    ...(googleClientId && googleClientSecret ? [GoogleProvider({\n      clientId: googleClientId,\n      clientSecret: googleClientSecret,\n    })] : []),\n\n    // Email magic links - configured for Gmail SMTP\n    EmailProvider({\n      server: {\n        host: process.env.EMAIL_SERVER_HOST || 'smtp.gmail.com',\n        port: Number(process.env.EMAIL_SERVER_PORT) || 587,\n        auth: {\n          user: process.env.EMAIL_SERVER_USER || 'noreply@smakowalo.pl',\n          pass: process.env.EMAIL_SERVER_PASSWORD || 'placeholder', // Use App Password for Gmail\n        },\n        secure: false, // Use STARTTLS\n      },\n      from: process.env.EMAIL_FROM || 'Smakowa≈Ço <noreply@smakowalo.pl>',\n    }),\n\n    // Credentials provider for testing and custom auth\n    CredentialsProvider({\n      name: 'credentials',\n      credentials: {\n        email: { label: 'Email', type: 'email' },\n        password: { label: 'Password', type: 'password' }\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          return null\n        }\n\n        // If we have Supabase, try to authenticate with it\n        if (supabase) {\n          try {\n            const { data, error } = await supabase.auth.signInWithPassword({\n              email: credentials.email,\n              password: credentials.password,\n            })\n\n            if (error || !data.user) {\n              return null\n            }\n\n            return {\n              id: data.user.id,\n              email: data.user.email,\n              name: `${data.user.user_metadata?.first_name || ''} ${data.user.user_metadata?.last_name || ''}`.trim(),\n            }\n          } catch (error) {\n            console.error('Supabase authentication error:', error)\n            return null\n          }\n        }\n\n        // Fallback test credentials for development\n        if (credentials.email === 'test@example.com' && credentials.password === 'password') {\n          return {\n            id: '1',\n            email: credentials.email,\n            name: 'Test User',\n          }\n        }\n\n        return null\n      }\n    }),\n  ],\n\n  pages: {\n    signIn: '/login',\n    error: '/login',\n    verifyRequest: '/verify-request',\n  },\n\n  callbacks: {\n    async session({ session, token, user }) {\n      // Add user ID to session\n      if (session.user && token.sub) {\n        session.user.email = session.user.email || token.email as string\n        // Store user ID in a custom way to avoid type issues\n        Object.assign(session.user, { id: token.sub })\n      }\n      return session\n    },\n\n    async jwt({ token, user, account }) {\n      // Store user ID in token\n      if (user) {\n        token.id = user.id\n      }\n\n      // Store provider info\n      if (account) {\n        token.provider = account.provider\n      }\n\n      return token\n    },\n\n    async redirect({ url, baseUrl }) {\n      // Redirect to panel after successful login\n      if (url.startsWith(baseUrl)) {\n        return '/panel'\n      }\n      return `${baseUrl}/panel`\n    },\n  },\n\n  events: {\n    async createUser({ user }) {\n      // Create profile in Supabase when user is created (only if using Supabase)\n      if (user.email && supabase) {\n        try {\n          const { error } = await supabase.from('profiles').insert({\n            id: user.id,\n            email: user.email,\n            first_name: user.name?.split(' ')[0] || '',\n            last_name: user.name?.split(' ').slice(1).join(' ') || '',\n            newsletter_subscribed: false,\n          })\n\n          if (error) {\n            console.error('Error creating user profile:', error)\n          } else {\n            console.log('User profile created successfully for:', user.email)\n          }\n        } catch (error) {\n          console.error('Error creating user profile:', error)\n        }\n      }\n    },\n\n    async signIn({ user, account, profile }) {\n      console.log('User signed in:', {\n        provider: account?.provider,\n        email: user.email,\n        userId: user.id\n      })\n    },\n  },\n\n  session: {\n    strategy: 'jwt',\n    maxAge: 30 * 24 * 60 * 60, // 30 days\n  },\n\n  // Add debug for development\n  debug: process.env.NODE_ENV === 'development',\n})\n\nexport { handler as GET, handler as POST }\n"],"names":[],"mappings":"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","debugId":null}}]
}