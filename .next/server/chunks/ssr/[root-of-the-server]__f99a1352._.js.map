{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file:///home/project/smakowalo-app/src/lib/supabase.ts"],"sourcesContent":["import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co'\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'placeholder-key'\n\n// Client-side Supabase client\nexport const createSupabaseClient = () => {\n  if (!supabaseUrl.includes('placeholder') &&\n      !supabaseAnonKey.includes('placeholder') &&\n      !supabaseAnonKey.includes('twoj-prawdziwy') &&\n      supabaseUrl.startsWith('https://') &&\n      supabaseAnonKey.length > 20) {\n    try {\n      return createClient(supabaseUrl, supabaseAnonKey)\n    } catch (error) {\n      console.error('Supabase client creation failed:', error)\n      return null\n    }\n  }\n  // Return null for placeholder/invalid configuration\n  console.log('Supabase not configured properly, using mock data')\n  return null\n}\n\n// Component client (for client components)\nexport const createSupabaseComponentClient = () => {\n  if (!supabaseUrl.includes('placeholder') &&\n      !supabaseAnonKey.includes('placeholder') &&\n      !supabaseAnonKey.includes('twoj-prawdziwy') &&\n      supabaseUrl.startsWith('https://') &&\n      supabaseAnonKey.length > 20) {\n    try {\n      return createClientComponentClient()\n    } catch (error) {\n      console.error('Supabase component client creation failed:', error)\n      return null\n    }\n  }\n  // Return null for placeholder/invalid configuration\n  console.log('Supabase not configured properly for components')\n  return null\n}\n\n// Main client instance\nexport const supabase = createSupabaseClient()\n\n// Database types\nexport type Database = {\n  public: {\n    Tables: {\n      profiles: {\n        Row: {\n          id: string\n          created_at: string\n          email: string\n          first_name: string | null\n          last_name: string | null\n          phone: string | null\n          newsletter_subscribed: boolean\n        }\n        Insert: {\n          id: string\n          created_at?: string\n          email: string\n          first_name?: string | null\n          last_name?: string | null\n          phone?: string | null\n          newsletter_subscribed?: boolean\n        }\n        Update: {\n          id?: string\n          created_at?: string\n          email?: string\n          first_name?: string | null\n          last_name?: string | null\n          phone?: string | null\n          newsletter_subscribed?: boolean\n        }\n      }\n      categories: {\n        Row: {\n          id: number\n          name: string\n          slug: string\n          description: string | null\n          image: string | null\n          created_at: string\n          updated_at: string\n          active: boolean\n        }\n        Insert: {\n          id?: number\n          name: string\n          slug: string\n          description?: string | null\n          image?: string | null\n          created_at?: string\n          updated_at?: string\n          active?: boolean\n        }\n        Update: {\n          id?: number\n          name?: string\n          slug?: string\n          description?: string | null\n          image?: string | null\n          created_at?: string\n          updated_at?: string\n          active?: boolean\n        }\n      }\n      products: {\n        Row: {\n          id: number\n          name: string\n          slug: string\n          description: string\n          image: string\n          price: number\n          old_price: number | null\n          category_id: number\n          cook_time: number\n          servings: number\n          difficulty: string\n          calories: number\n          protein: number\n          carbs: number\n          fat: number\n          fiber: number\n          rating: number\n          reviews_count: number\n          ingredients: string[]\n          allergens: string[]\n          equipment: string[] | null\n          instructions: Array<{\n            step: number\n            title?: string\n            description: string\n          }>\n          nutrition_per_100g: {\n            energy: string\n            fat: string\n            saturated_fat: string\n            carbs: string\n            sugar: string\n            protein: string\n            salt: string\n          } | null\n          tags: string[]\n          diets: string[]\n          active: boolean\n          featured: boolean\n          stock_quantity: number\n          sku: string | null\n          created_at: string\n          updated_at: string\n        }\n        Insert: {\n          id?: number\n          name: string\n          slug: string\n          description: string\n          image: string\n          price: number\n          old_price?: number | null\n          category_id: number\n          cook_time: number\n          servings: number\n          difficulty: string\n          calories: number\n          protein: number\n          carbs: number\n          fat: number\n          fiber: number\n          rating?: number\n          reviews_count?: number\n          ingredients: string[]\n          allergens: string[]\n          equipment?: string[] | null\n          instructions: Array<{\n            step: number\n            title?: string\n            description: string\n          }>\n          nutrition_per_100g?: {\n            energy: string\n            fat: string\n            saturated_fat: string\n            carbs: string\n            sugar: string\n            protein: string\n            salt: string\n          } | null\n          tags: string[]\n          diets: string[]\n          active?: boolean\n          featured?: boolean\n          stock_quantity?: number\n          sku?: string | null\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          id?: number\n          name?: string\n          slug?: string\n          description?: string\n          image?: string\n          price?: number\n          old_price?: number | null\n          category_id?: number\n          cook_time?: number\n          servings?: number\n          difficulty?: string\n          calories?: number\n          protein?: number\n          carbs?: number\n          fat?: number\n          fiber?: number\n          rating?: number\n          reviews_count?: number\n          ingredients?: string[]\n          allergens?: string[]\n          equipment?: string[] | null\n          instructions?: Array<{\n            step: number\n            title?: string\n            description: string\n          }>\n          nutrition_per_100g?: {\n            energy: string\n            fat: string\n            saturated_fat: string\n            carbs: string\n            sugar: string\n            protein: string\n            salt: string\n          } | null\n          tags?: string[]\n          diets?: string[]\n          active?: boolean\n          featured?: boolean\n          stock_quantity?: number\n          sku?: string | null\n          created_at?: string\n          updated_at?: string\n        }\n      }\n      orders: {\n        Row: {\n          id: number\n          user_id: string\n          status: 'pending' | 'confirmed' | 'preparing' | 'shipped' | 'delivered' | 'cancelled'\n          total_amount: number\n          currency: string\n          payment_status: 'pending' | 'paid' | 'failed' | 'refunded'\n          payment_method: string | null\n          payment_intent_id: string | null\n          delivery_date: string | null\n          delivery_address: {\n            name: string\n            street: string\n            city: string\n            postal_code: string\n            phone: string\n            notes?: string\n          }\n          billing_address: {\n            name: string\n            street: string\n            city: string\n            postal_code: string\n            phone: string\n          } | null\n          notes: string | null\n          created_at: string\n          updated_at: string\n        }\n        Insert: {\n          id?: number\n          user_id: string\n          status?: 'pending' | 'confirmed' | 'preparing' | 'shipped' | 'delivered' | 'cancelled'\n          total_amount: number\n          currency?: string\n          payment_status?: 'pending' | 'paid' | 'failed' | 'refunded'\n          payment_method?: string | null\n          payment_intent_id?: string | null\n          delivery_date?: string | null\n          delivery_address: {\n            name: string\n            street: string\n            city: string\n            postal_code: string\n            phone: string\n            notes?: string\n          }\n          billing_address?: {\n            name: string\n            street: string\n            city: string\n            postal_code: string\n            phone: string\n          } | null\n          notes?: string | null\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          id?: number\n          user_id?: string\n          status?: 'pending' | 'confirmed' | 'preparing' | 'shipped' | 'delivered' | 'cancelled'\n          total_amount?: number\n          currency?: string\n          payment_status?: 'pending' | 'paid' | 'failed' | 'refunded'\n          payment_method?: string | null\n          payment_intent_id?: string | null\n          delivery_date?: string | null\n          delivery_address?: {\n            name: string\n            street: string\n            city: string\n            postal_code: string\n            phone: string\n            notes?: string\n          }\n          billing_address?: {\n            name: string\n            street: string\n            city: string\n            postal_code: string\n            phone: string\n          } | null\n          notes?: string | null\n          created_at?: string\n          updated_at?: string\n        }\n      }\n      order_items: {\n        Row: {\n          id: number\n          order_id: number\n          product_id: number\n          quantity: number\n          unit_price: number\n          total_price: number\n          selected_meals: string[]\n          created_at: string\n        }\n        Insert: {\n          id?: number\n          order_id: number\n          product_id: number\n          quantity: number\n          unit_price: number\n          total_price: number\n          selected_meals: string[]\n          created_at?: string\n        }\n        Update: {\n          id?: number\n          order_id?: number\n          product_id?: number\n          quantity?: number\n          unit_price?: number\n          total_price?: number\n          selected_meals?: string[]\n          created_at?: string\n        }\n      }\n      reviews: {\n        Row: {\n          id: number\n          product_id: number\n          user_id: string\n          rating: number\n          title: string | null\n          comment: string | null\n          verified_purchase: boolean\n          created_at: string\n          updated_at: string\n        }\n        Insert: {\n          id?: number\n          product_id: number\n          user_id: string\n          rating: number\n          title?: string | null\n          comment?: string | null\n          verified_purchase?: boolean\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          id?: number\n          product_id?: number\n          user_id?: string\n          rating?: number\n          title?: string | null\n          comment?: string | null\n          verified_purchase?: boolean\n          created_at?: string\n          updated_at?: string\n        }\n      }\n      cart_items: {\n        Row: {\n          id: number\n          user_id: string\n          product_id: number\n          quantity: number\n          selected_meals: string[]\n          created_at: string\n          updated_at: string\n        }\n        Insert: {\n          id?: number\n          user_id: string\n          product_id: number\n          quantity: number\n          selected_meals: string[]\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          id?: number\n          user_id?: string\n          product_id?: number\n          quantity?: number\n          selected_meals?: string[]\n          created_at?: string\n          updated_at?: string\n        }\n      }\n    }\n    Views: {\n      [_ in never]: never\n    }\n    Functions: {\n      [_ in never]: never\n    }\n    Enums: {\n      [_ in never]: never\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;AAAA;AACA;;;AAEA,MAAM,cAAc,gFAAwC;AAC5D,MAAM,kBAAkB,qEAA6C;AAG9D,MAAM,uBAAuB;IAClC,IAAI,CAAC,YAAY,QAAQ,CAAC,kBACtB,CAAC,gBAAgB,QAAQ,CAAC,kBAC1B,CAAC,gBAAgB,QAAQ,CAAC,qBAC1B,YAAY,UAAU,CAAC,eACvB,gBAAgB,MAAM,GAAG,IAAI;QAC/B,IAAI;YACF,OAAO,CAAA,GAAA,uLAAA,CAAA,eAAY,AAAD,EAAE,aAAa;QACnC,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,oCAAoC;YAClD,OAAO;QACT;IACF;IACA,oDAAoD;IACpD,QAAQ,GAAG,CAAC;IACZ,OAAO;AACT;AAGO,MAAM,gCAAgC;IAC3C,IAAI,CAAC,YAAY,QAAQ,CAAC,kBACtB,CAAC,gBAAgB,QAAQ,CAAC,kBAC1B,CAAC,gBAAgB,QAAQ,CAAC,qBAC1B,YAAY,UAAU,CAAC,eACvB,gBAAgB,MAAM,GAAG,IAAI;QAC/B,IAAI;YACF,OAAO,CAAA,GAAA,wKAAA,CAAA,8BAA2B,AAAD;QACnC,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,8CAA8C;YAC5D,OAAO;QACT;IACF;IACA,oDAAoD;IACpD,QAAQ,GAAG,CAAC;IACZ,OAAO;AACT;AAGO,MAAM,WAAW","debugId":null}},
    {"offset": {"line": 147, "column": 0}, "map": {"version":3,"sources":["file:///home/project/smakowalo-app/src/contexts/AuthContext.tsx"],"sourcesContent":["'use client'\n\nimport { createContext, useContext, useEffect, useState } from 'react'\nimport { createSupabaseComponentClient } from '@/lib/supabase'\nimport type { User, Session, AuthResponse } from '@supabase/supabase-js'\n\ninterface UserData {\n  firstName: string\n  lastName: string\n  phone: string\n  newsletter: boolean\n}\n\ninterface AuthContextType {\n  user: User | null\n  session: Session | null\n  loading: boolean\n  signUp: (email: string, password: string, userData: UserData) => Promise<AuthResponse>\n  signIn: (email: string, password: string) => Promise<AuthResponse>\n  signOut: () => Promise<void>\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null)\n  const [session, setSession] = useState<Session | null>(null)\n  const [loading, setLoading] = useState(true)\n\n  const supabase = createSupabaseComponentClient()\n\n  // Check if Supabase is configured\n  const isConfigured = process.env.NEXT_PUBLIC_SUPABASE_URL &&\n    !process.env.NEXT_PUBLIC_SUPABASE_URL.includes('placeholder')\n\n  useEffect(() => {\n    if (!isConfigured || !supabase) {\n      setLoading(false)\n      return\n    }\n\n    // Get initial session\n    const getInitialSession = async () => {\n      try {\n        const { data: { session }, error } = await supabase.auth.getSession()\n        if (error) {\n          console.error('Error getting session:', error)\n        } else {\n          setSession(session)\n          setUser(session?.user ?? null)\n        }\n      } catch (error) {\n        console.error('Supabase not available:', error)\n      }\n      setLoading(false)\n    }\n\n    getInitialSession()\n\n    // Listen for auth changes\n    try {\n      const { data: { subscription } } = supabase.auth.onAuthStateChange(\n        async (event, session) => {\n          setSession(session)\n          setUser(session?.user ?? null)\n          setLoading(false)\n        }\n      )\n\n      return () => subscription.unsubscribe()\n    } catch (error) {\n      console.error('Supabase auth subscription failed:', error)\n    }\n  }, [supabase, isConfigured])\n\n  const signUp = async (email: string, password: string, userData: UserData) => {\n    if (!isConfigured || !supabase) {\n      throw new Error('Supabase is not configured')\n    }\n\n    const { data, error } = await supabase.auth.signUp({\n      email,\n      password,\n    })\n\n    if (error) {\n      throw error\n    }\n\n    // Create profile\n    if (data.user) {\n      const { error: profileError } = await supabase\n        .from('profiles')\n        .insert({\n          id: data.user.id,\n          email: data.user.email || email,\n          first_name: userData.firstName,\n          last_name: userData.lastName,\n          phone: userData.phone,\n          newsletter_subscribed: userData.newsletter || false,\n        })\n\n      if (profileError) {\n        console.error('Error creating profile:', profileError)\n      }\n    }\n\n    return { data, error }\n  }\n\n  const signIn = async (email: string, password: string) => {\n    if (!isConfigured || !supabase) {\n      throw new Error('Supabase is not configured')\n    }\n\n    const { data, error } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    })\n\n    if (error) {\n      throw error\n    }\n\n    return { data, error }\n  }\n\n  const signOut = async () => {\n    if (!isConfigured || !supabase) {\n      throw new Error('Supabase is not configured')\n    }\n\n    const { error } = await supabase.auth.signOut()\n    if (error) {\n      throw error\n    }\n  }\n\n  const value = {\n    user,\n    session,\n    loading,\n    signUp,\n    signIn,\n    signOut,\n  }\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\n}\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext)\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider')\n  }\n  return context\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 288, "column": 0}, "map": {"version":3,"sources":["file:///home/project/smakowalo-app/src/contexts/CartContext.tsx"],"sourcesContent":["'use client'\n\nimport { createContext, useContext, useEffect, useState } from 'react'\n\ninterface CartItem {\n  id: number\n  name: string\n  image: string\n  price: number\n  quantity: number\n  selectedMeals?: string[]\n}\n\ninterface CartContextType {\n  items: CartItem[]\n  totalItems: number\n  totalPrice: number\n  addItem: (item: Omit<CartItem, 'quantity'>, quantity?: number) => void\n  removeItem: (id: number) => void\n  updateQuantity: (id: number, quantity: number) => void\n  clearCart: () => void\n  isLoading: boolean\n}\n\nconst CartContext = createContext<CartContextType | undefined>(undefined)\n\nexport function CartProvider({ children }: { children: React.ReactNode }) {\n  const [items, setItems] = useState<CartItem[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n\n  // Load cart from localStorage on mount\n  useEffect(() => {\n    try {\n      const savedCart = localStorage.getItem('smakowalo-cart')\n      if (savedCart) {\n        setItems(JSON.parse(savedCart))\n      }\n    } catch (error) {\n      console.error('Error loading cart from localStorage:', error)\n    } finally {\n      setIsLoading(false)\n    }\n  }, [])\n\n  // Save cart to localStorage whenever items change\n  useEffect(() => {\n    if (!isLoading) {\n      try {\n        localStorage.setItem('smakowalo-cart', JSON.stringify(items))\n      } catch (error) {\n        console.error('Error saving cart to localStorage:', error)\n      }\n    }\n  }, [items, isLoading])\n\n  const addItem = (newItem: Omit<CartItem, 'quantity'>, quantity = 1) => {\n    setItems(prevItems => {\n      const existingItem = prevItems.find(item => item.id === newItem.id)\n\n      if (existingItem) {\n        // Update quantity if item already exists\n        return prevItems.map(item =>\n          item.id === newItem.id\n            ? { ...item, quantity: item.quantity + quantity }\n            : item\n        )\n      }\n\n      // Add new item\n      return [...prevItems, { ...newItem, quantity }]\n    })\n  }\n\n  const removeItem = (id: number) => {\n    setItems(prevItems => prevItems.filter(item => item.id !== id))\n  }\n\n  const updateQuantity = (id: number, quantity: number) => {\n    if (quantity <= 0) {\n      removeItem(id)\n      return\n    }\n\n    setItems(prevItems =>\n      prevItems.map(item =>\n        item.id === id ? { ...item, quantity } : item\n      )\n    )\n  }\n\n  const clearCart = () => {\n    setItems([])\n  }\n\n  const totalItems = items.reduce((sum, item) => sum + item.quantity, 0)\n  const totalPrice = items.reduce((sum, item) => sum + (item.price * item.quantity), 0)\n\n  const value = {\n    items,\n    totalItems,\n    totalPrice,\n    addItem,\n    removeItem,\n    updateQuantity,\n    clearCart,\n    isLoading\n  }\n\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>\n}\n\nexport const useCart = () => {\n  const context = useContext(CartContext)\n  if (context === undefined) {\n    throw new Error('useCart must be used within a CartProvider')\n  }\n  return context\n}\n"],"names":[],"mappings":";;;;;;AAEA;AAFA;;;AAwBA,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAA+B;AAExD,SAAS,aAAa,EAAE,QAAQ,EAAiC;IACtE,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAc,EAAE;IACjD,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,uCAAuC;IACvC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI;YACF,MAAM,YAAY,aAAa,OAAO,CAAC;YACvC,IAAI,WAAW;gBACb,SAAS,KAAK,KAAK,CAAC;YACtB;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,yCAAyC;QACzD,SAAU;YACR,aAAa;QACf;IACF,GAAG,EAAE;IAEL,kDAAkD;IAClD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,CAAC,WAAW;YACd,IAAI;gBACF,aAAa,OAAO,CAAC,kBAAkB,KAAK,SAAS,CAAC;YACxD,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,sCAAsC;YACtD;QACF;IACF,GAAG;QAAC;QAAO;KAAU;IAErB,MAAM,UAAU,CAAC,SAAqC,WAAW,CAAC;QAChE,SAAS,CAAA;YACP,MAAM,eAAe,UAAU,IAAI,CAAC,CAAA,OAAQ,KAAK,EAAE,KAAK,QAAQ,EAAE;YAElE,IAAI,cAAc;gBAChB,yCAAyC;gBACzC,OAAO,UAAU,GAAG,CAAC,CAAA,OACnB,KAAK,EAAE,KAAK,QAAQ,EAAE,GAClB;wBAAE,GAAG,IAAI;wBAAE,UAAU,KAAK,QAAQ,GAAG;oBAAS,IAC9C;YAER;YAEA,eAAe;YACf,OAAO;mBAAI;gBAAW;oBAAE,GAAG,OAAO;oBAAE;gBAAS;aAAE;QACjD;IACF;IAEA,MAAM,aAAa,CAAC;QAClB,SAAS,CAAA,YAAa,UAAU,MAAM,CAAC,CAAA,OAAQ,KAAK,EAAE,KAAK;IAC7D;IAEA,MAAM,iBAAiB,CAAC,IAAY;QAClC,IAAI,YAAY,GAAG;YACjB,WAAW;YACX;QACF;QAEA,SAAS,CAAA,YACP,UAAU,GAAG,CAAC,CAAA,OACZ,KAAK,EAAE,KAAK,KAAK;oBAAE,GAAG,IAAI;oBAAE;gBAAS,IAAI;IAG/C;IAEA,MAAM,YAAY;QAChB,SAAS,EAAE;IACb;IAEA,MAAM,aAAa,MAAM,MAAM,CAAC,CAAC,KAAK,OAAS,MAAM,KAAK,QAAQ,EAAE;IACpE,MAAM,aAAa,MAAM,MAAM,CAAC,CAAC,KAAK,OAAS,MAAO,KAAK,KAAK,GAAG,KAAK,QAAQ,EAAG;IAEnF,MAAM,QAAQ;QACZ;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IACF;IAEA,qBAAO,sLAAC,YAAY,QAAQ;QAAC,OAAO;kBAAQ;;;;;;AAC9C;AAEO,MAAM,UAAU;IACrB,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 398, "column": 0}, "map": {"version":3,"sources":["file:///home/project/smakowalo-app/src/app/ClientBody.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect } from \"react\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport { CartProvider } from \"@/contexts/CartContext\";\n\nexport default function ClientBody({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  // Remove any extension-added classes during hydration\n  useEffect(() => {\n    // This runs only on the client after hydration\n    document.body.className = \"antialiased\";\n  }, []);\n\n  return (\n    <AuthProvider>\n      <CartProvider>\n        <div className=\"antialiased\">{children}</div>\n      </CartProvider>\n    </AuthProvider>\n  );\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAJA;;;;;AAMe,SAAS,WAAW,EACjC,QAAQ,EAGT;IACC,sDAAsD;IACtD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,+CAA+C;QAC/C,SAAS,IAAI,CAAC,SAAS,GAAG;IAC5B,GAAG,EAAE;IAEL,qBACE,sLAAC,+HAAA,CAAA,eAAY;kBACX,cAAA,sLAAC,+HAAA,CAAA,eAAY;sBACX,cAAA,sLAAC;gBAAI,WAAU;0BAAe;;;;;;;;;;;;;;;;AAItC","debugId":null}}]
}