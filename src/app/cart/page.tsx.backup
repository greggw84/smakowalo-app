"use client"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Minus, Plus, Trash2, ShoppingCart } from "lucide-react"
import { useState } from "react"
import Link from "next/link"
import Image from "next/image"

type CartItem = {
  id: number
  name: string
  description: string
  image: string
  price: number
  quantity: number
  diet: string[]
  people: number
  days: number
}

const initialCartItems: CartItem[] = [
  {
    id: 1,
    name: "Plan Keto - 2 osoby, 3 dni",
    description: "Wysokotłuszczowa dieta ketogeniczna z trzema wybranymi daniami",
    image: "https://ext.same-assets.com/817389662/206723592.jpeg",
    price: 95.94, // 2 * 3 * 15.99
    quantity: 1,
    diet: ["keto"],
    people: 2,
    days: 3
  },
  {
    id: 2,
    name: "Plan Wegetariański - 4 osoby, 5 dni",
    description: "Zdrowa dieta roślinna z pięcioma wybranymi daniami",
    image: "https://ext.same-assets.com/817389662/2623479817.jpeg",
    price: 319.8, // 4 * 5 * 15.99
    quantity: 1,
    diet: ["vegetarian"],
    people: 4,
    days: 5
  }
]

export default function CartPage() {
  const [cartItems, setCartItems] = useState<CartItem[]>(initialCartItems)
  const [discountCode, setDiscountCode] = useState("")

  const updateQuantity = (id: number, newQuantity: number) => {
    if (newQuantity < 1) return
    setCartItems(cartItems.map(item =>
      item.id === id ? { ...item, quantity: newQuantity } : item
    ))
  }

  const removeItem = (id: number) => {
    setCartItems(cartItems.filter(item => item.id !== id))
  }

  const subtotal = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0)
  const deliveryFee = subtotal > 150 ? 0 : 15.99
  const discount = 0 // TODO: implement discount logic
  const total = subtotal + deliveryFee - discount

  return (
    <div className="min-h-screen bg-gradient-to-b from-smakowalo-cream to-white">
      {/* Navigation */}
      <nav className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <Link href="/" className="text-2xl font-bold text-[var(--smakowalo-green-primary)]">
              Smakowało
            </Link>
            <div className="hidden md:block">
              <div className="ml-10 flex items-baseline space-x-4">
                <Link href="/menu" className="text-gray-700 hover:text-[var(--smakowalo-green-primary)] px-3 py-2 rounded-md text-sm font-medium">
                  Menu
                </Link>
                <Link href="/kreator" className="text-gray-700 hover:text-[var(--smakowalo-green-primary)] px-3 py-2 rounded-md text-sm font-medium">
                  Kreator
                </Link>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <Link href="/login">
                <Button variant="outline" className="border-[var(--smakowalo-green-primary)] text-[var(--smakowalo-green-primary)]">
                  Zaloguj
                </Button>
              </Link>
            </div>
          </div>
        </div>
      </nav>

      <div className="max-w-4xl mx-auto px-4 py-8">
        <div className="flex items-center mb-8">
          <ShoppingCart className="w-8 h-8 text-[var(--smakowalo-green-primary)] mr-3" />
          <h1 className="text-3xl font-bold text-[var(--smakowalo-green-dark)]">
            Twój koszyk
          </h1>
        </div>

        {cartItems.length === 0 ? (
          // Empty Cart
          <div className="text-center py-16">
            <ShoppingCart className="w-24 h-24 text-gray-300 mx-auto mb-6" />
            <h2 className="text-2xl font-bold text-gray-400 mb-4">
              Twój koszyk jest pusty
            </h2>
            <p className="text-gray-600 mb-8">
              Dodaj kilka pysznych dań, aby rozpocząć swoją kulinarną przygodę
            </p>
            <div className="space-x-4">
              <Link href="/menu">
                <Button className="smakowalo-green">
                  Przeglądaj menu
                </Button>
              </Link>
              <Link href="/kreator">
                <Button variant="outline" className="border-[var(--smakowalo-green-primary)] text-[var(--smakowalo-green-primary)]">
                  Użyj kreatora
                </Button>
              </Link>
            </div>
          </div>
        ) : (
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* Cart Items */}
            <div className="lg:col-span-2 space-y-4">
              {cartItems.map((item) => (
                <Card key={item.id} className="overflow-hidden">
                  <CardContent className="p-0">
                    <div className="flex">
                      <div className="relative w-32 h-32 flex-shrink-0">
                        <Image
                          src={item.image}
                          alt={item.name}
                          fill
                          className="object-cover"
                        />
                      </div>

                      <div className="flex-1 p-6">
                        <div className="flex justify-between items-start mb-2">
                          <h3 className="text-lg font-semibold text-[var(--smakowalo-green-dark)]">
                            {item.name}
                          </h3>
                          <button
                            onClick={() => removeItem(item.id)}
                            className="text-red-500 hover:text-red-700 p-1"
                            title="Usuń z koszyka"
                          >
                            <Trash2 className="w-4 h-4" />
                          </button>
                        </div>

                        <p className="text-gray-600 text-sm mb-3">
                          {item.description}
                        </p>

                        <div className="flex items-center gap-2 mb-4">
                          {item.diet.map((dietType) => (
                            <Badge key={dietType} variant="secondary" className="text-xs">
                              {dietType}
                            </Badge>
                          ))}
                        </div>

                        <div className="flex items-center justify-between">
                          <div className="text-sm text-gray-600">
                            {item.people} {item.people === 2 ? "osoby" : "osób"} × {item.days} dni
                          </div>

                          <div className="flex items-center gap-4">
                            <div className="flex items-center border rounded-lg">
                              <button
                                onClick={() => updateQuantity(item.id, item.quantity - 1)}
                                className="p-2 hover:bg-gray-50"
                                disabled={item.quantity <= 1}
                              >
                                <Minus className="w-4 h-4" />
                              </button>
                              <span className="px-4 py-2 min-w-[3rem] text-center">
                                {item.quantity}
                              </span>
                              <button
                                onClick={() => updateQuantity(item.id, item.quantity + 1)}
                                className="p-2 hover:bg-gray-50"
                              >
                                <Plus className="w-4 h-4" />
                              </button>
                            </div>

                            <div className="text-right">
                              <div className="text-lg font-semibold text-[var(--smakowalo-green-primary)]">
                                {(item.price * item.quantity).toFixed(2)} zł
                              </div>
                              <div className="text-sm text-gray-500">
                                {item.price.toFixed(2)} zł / szt
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>

            {/* Order Summary */}
            <div className="lg:col-span-1">
              <Card className="sticky top-4">
                <CardHeader>
                  <CardTitle className="text-xl text-[var(--smakowalo-green-dark)]">
                    Podsumowanie zamówienia
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="flex justify-between">
                    <span>Wartość produktów:</span>
                    <span>{subtotal.toFixed(2)} zł</span>
                  </div>

                  <div className="flex justify-between">
                    <span>Dostawa:</span>
                    <span>
                      {deliveryFee === 0 ? (
                        <span className="text-green-600">Gratis!</span>
                      ) : (
                        `${deliveryFee.toFixed(2)} zł`
                      )}
                    </span>
                  </div>

                  {deliveryFee > 0 && (
                    <div className="text-sm text-gray-600 bg-blue-50 p-3 rounded-lg">
                      💡 Dodaj jeszcze {(150 - subtotal).toFixed(2)} zł do zamówienia,
                      aby otrzymać darmową dostawę!
                    </div>
                  )}

                  {discount > 0 && (
                    <div className="flex justify-between text-green-600">
                      <span>Rabat:</span>
                      <span>-{discount.toFixed(2)} zł</span>
                    </div>
                  )}

                  <div className="border-t pt-4">
                    <div className="flex justify-between text-lg font-bold">
                      <span>Łącznie:</span>
                      <span className="text-[var(--smakowalo-green-primary)]">
                        {total.toFixed(2)} zł
                      </span>
                    </div>
                  </div>

                  {/* Discount Code */}
                  <div className="border-t pt-4">
                    <h4 className="text-sm font-medium mb-2">Kod rabatowy:</h4>
                    <div className="flex gap-2">
                      <Input
                        placeholder="Wprowadź kod"
                        value={discountCode}
                        onChange={(e) => setDiscountCode(e.target.value)}
                        className="flex-1"
                      />
                      <Button variant="outline" size="sm">
                        Zastosuj
                      </Button>
                    </div>
                  </div>

                  <div className="space-y-3 pt-4">
                    <Link href="/checkout" className="w-full">
                      <Button className="w-full smakowalo-green text-lg py-3">
                        Przejdź do płatności
                      </Button>
                    </Link>

                    <Link href="/menu" className="w-full">
                      <Button variant="outline" className="w-full border-[var(--smakowalo-green-primary)] text-[var(--smakowalo-green-primary)]">
                        Kontynuuj zakupy
                      </Button>
                    </Link>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}
